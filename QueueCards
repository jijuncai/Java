public class QueueCards
{
   // main method
   public static void main(String[] args)
   {
      // initialize an CardQueue object
      CardQueue que = new CardQueue();

      // create cards and add them to CardQueue object
      que.addCard(new Card('A', Card.Suit.spades));
      que.addCard(new Card('J', Card.Suit.diamonds));
      que.addCard(new Card('Q', Card.Suit.clubs));
      que.addCard(new Card('K', Card.Suit.hearts));

      // display all added cards
      System.out.println("Card queue after adding:\n" + que);

      System.out.println("Remove and show all cards:");
      // try and catch QueueEmptyException
      try
      {
         // remove and display numbers of cards
         for (int i = 0; i < 5; i++)
            System.out.println(que.removeCard());
      } catch (QueueEmptyException ex)
      {
         System.out.println(ex);
      }
   }
}

// class QueueEmptyException
class QueueEmptyException extends Exception
{
   // default construction
   public QueueEmptyException()
   {
      this("Queue is empty");
   }

   // one parameter construction
   public QueueEmptyException(String mes)
   {
      super(mes);
   }

}

class Node
{
   // data (we allow Queue class public access)
   protected Node next;

   // constructor
   public Node()
   {
      next = null;
   }

   // toString method
   public String toString()
   {
      return "generic node";
   }
}

class cardNode extends Node
{
   // additional data for subclass
   private Card card;

   // constructor
   public cardNode(Card cards)
   {
      super();
      card = cards;
   }

   // assessor for card
   public Card getCard()
   {
      return card;
   }

   // return card by String
   public String toString()
   {
      return card + "\n";
   }
}

// Class Queue ---------------------------------------
class Queue
{
   // pointer to first node in Queue
   private Node head;
   // pointer to last node in Queue
   private Node tail;

   // constructor
   public Queue()
   {
      head = null;
      tail = null;
   }

   // set empty method
   public boolean isEmpty()
   {
      return head == null;
   }

   // add new Node method
   public void add(Node newNode)
   {
      if (isEmpty())
      {
         head = newNode;
         tail = newNode;
      } else
      {
         tail.next = newNode;
         tail = newNode;
      }
   }

   // remove Node according to the Queue rule
   public Node remove() throws QueueEmptyException
   {
      // if no nodes
      if (isEmpty())
      {
         // throws default QueueEmptyException
         throw new QueueEmptyException();
      }

      Node tem = head;

      // if only one node
      if (tem.next == null)
      {
         head = null;
      }

      // if more than one node
      if (tem.next != null)
      {
         head = tem.next;
         tem.next = null;
      }

      return tem;
   }

   // produces a String of all the items in the Queue from oldest to youngest
   public String toString()
   {
      Node tem;
      String str = "";

      // return all the nodes in the Queue
      for (tem = head; tem != null; tem = tem.next)
         str += tem.toString();
      return str;
   }
}

// class CardQueue
class CardQueue extends Queue
{
   // addCard method
   public void addCard(Card cards)
   {
      if (cards == null)
         return;
      cardNode cn = new cardNode(cards);
      super.add(cn);
   }

   // removeCard method
   public Card removeCard() throws QueueEmptyException
   {
      cardNode cardNo = (cardNode) remove();
      if (cardNo == null)
         return null;
      else
         return cardNo.getCard();
   }
}

// class Card ----------------------------------------------------------------
class Card
{
   // type and constants
   public enum State
   {
      deleted, active
   } // not bool because later we may expand

   public enum Suit
   {
      clubs, diamonds, hearts, spades
   }

   // for sort.
   public static char[] valueRanks =
   { '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A', 'X' };
   static Suit[] suitRanks =
   { Suit.clubs, Suit.diamonds, Suit.hearts, Suit.spades };
   static int numValsInOrderingArray = 13; // maybe 14 if 'X' = Joker, or < 13

   // private data
   private char value;
   private Suit suit;
   State state;
   boolean errorFlag;

   // 4 overloaded constructors
   public Card(char value, Suit suit)
   {
      set(value, suit);
   }

   public Card(char value)
   {
      this(value, Suit.spades);
   }

   public Card()
   {
      this('A', Suit.spades);
   }

   // copy constructor
   public Card(Card card)
   {
      this(card.value, card.suit);
   }

   // mutators
   public boolean set(char value, Suit suit)
   {
      char upVal; // for upcasing char

      // can't really have an error here
      this.suit = suit;

      // convert to uppercase to simplify
      upVal = Character.toUpperCase(value);

      // check for validity
      if (upVal == 'A' || upVal == 'K' || upVal == 'Q' || upVal == 'J'
            || upVal == 'T' || upVal == 'X' || (upVal >= '2' && upVal <= '9'))
      {
         errorFlag = false;
         state = State.active;
         this.value = upVal;
      } else
      {
         errorFlag = true;
         return false;
      }

      return !errorFlag;
   }

   public void setState(State state)
   {
      this.state = state;
   }

   // accessors
   public char getVal()
   {
      return value;
   }

   public Suit getSuit()
   {
      return suit;
   }

   public State getState()
   {
      return state;
   }

   public boolean getErrorFlag()
   {
      return errorFlag;
   }

   // stringizer
   public String toString()
   {
      String retVal;

      if (errorFlag)
         return "** illegal **";
      if (state == State.deleted)
         return "( deleted )";

      // else implied

      if (value != 'X')
      {
         // not a joker
         retVal = String.valueOf(value);
         retVal += " of ";
         retVal += String.valueOf(suit);
      } else
      {
         // joker
         retVal = "joker";

         if (suit == Suit.clubs)
            retVal += " 1";
         else if (suit == Suit.diamonds)
            retVal += " 2";
         else if (suit == Suit.hearts)
            retVal += " 3";
         else if (suit == Suit.spades)
            retVal += " 4";
      }

      return retVal;
   }

   public boolean equals(Card card)
   {
      if (this.value != card.value)
         return false;
      if (this.suit != card.suit)
         return false;
      if (this.errorFlag != card.errorFlag)
         return false;
      if (this.state != card.state)
         return false;
      return true;
   }

   // sort member methods
   public int compareTo(Card other)
   {
      if (this.value == other.value)
         return (getSuitRank(this.suit) - getSuitRank(other.suit));

      return (getValueRank(this.value) - getValueRank(other.value));
   }

   public static void setRankingOrder(char[] valueOrderArr, Suit[] suitOrdeArr,
         int numValsInOrderingArray)
   {
      int k;

      // expects valueOrderArr[] to contain only cards used per pack,
      // including jokers, needed to define order for the game environment

      if (numValsInOrderingArray < 0 || numValsInOrderingArray > 13)
         return;

      Card.numValsInOrderingArray = numValsInOrderingArray;

      for (k = 0; k < numValsInOrderingArray; k++)
         Card.valueRanks[k] = valueOrderArr[k];

      for (k = 0; k < 4; k++)
         Card.suitRanks[k] = suitOrdeArr[k];
   }

   public static int getSuitRank(Suit st)
   {
      int k;

      for (k = 0; k < 4; k++)
         if (suitRanks[k] == st)
            return k;

      // should not happen
      return 0;
   }

   public static int getValueRank(char val)
   {
      int k;

      for (k = 0; k < numValsInOrderingArray; k++)
         if (valueRanks[k] == val)
            return k;

      // should not happen
      return 0;
   }

   public static void arraySort(Card[] array, int arraySize)
   {
      for (int k = 0; k < arraySize; k++)
         if (!floatLargestToTop(array, arraySize - 1 - k))
            return;
   }

   private static boolean floatLargestToTop(Card[] array, int top)
   {
      boolean changed = false;
      Card temp;

      for (int k = 0; k < top; k++)
         if (array[k].compareTo(array[k + 1]) > 0)
         {
            temp = array[k];
            array[k] = array[k + 1];
            array[k + 1] = temp;
            changed = true;
         }
      ;
      return changed;
   }
}
