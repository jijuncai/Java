import java.util.LinkedList;
import java.util.ListIterator;

public class SortedCardList
{
   public static void main(String[] args)
   {
      // ranking order for game "Tchoo Da Dee" ("the big two"):
      char[] valueOrder =
      {'3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A', '2', 'X'  };
      Card.Suit[] suitOrder =
      { Card.Suit.diamonds, Card.Suit.clubs, Card.Suit.hearts,
            Card.Suit.spades };

      //Instantiate two Linked List collections of Card
      LinkedList<Card> list1 = new LinkedList<Card>();
      LinkedList<Card> list2 = new LinkedList<Card>();

      //data
      int j = 20;
      Card[] card = new Card[j];

      //randomly generated 20 Cards
      for (int k = 0; k < j; k++)
      {
         card[k] = generateRandomCard();
      }

      //insert identical randomly generated 20 Cards each list by different rule
      for (int k = 0; k < j; k++)
      {
         insert(list1, card[k]);
         CardWOrderStk.pushOrdering();
         Card.setRankingOrder(valueOrder, suitOrder, 14);
         insert(list2, card[k]);
         CardWOrderStk.popOrdering();
      }
      
      //show all lists
      showList(list1);
      showList(list2);
   }

   //show all cards of list
   static void showList(LinkedList<Card> myList)
   {
      System.out.println("\n_____Here's the List_______\n");
      System.out.print(myList);
      System.out.println("\n_____That's all!_______\n");
   }

   //insert cards to list
   public static void insert(LinkedList<Card> myList, Card card)
   {
      ListIterator<Card> iter;
      Card cardx;

      for (iter = myList.listIterator(); iter.hasNext();)
      {
         cardx = iter.next();
         if (card.compareTo(cardx) <= 0)
         {
            iter.previous(); // back up one
            break;
         }
      }
      iter.add(card);
   }

   //remove cards from list
   static boolean remove(LinkedList<Card> myList, Card card)
   {
      ListIterator<Card> iter;

      for (iter = myList.listIterator(); iter.hasNext();)
         if (card.compareTo(iter.next()) == 0)
         {
            iter.remove();
            return true; // we found, we removed, we return
         }
      return false;
   }

   // remove all from list
   static boolean removeAll(LinkedList<Card> myList, Card card)
   {
      if (!myList.contains(card))
         return false;
      while (remove(myList, card))
         ;
      return true;
   }

   // "global" static Foothill methods
   static Card generateRandomCard()
   {
      Card.Suit suit;
      char val;

      int suitSelector, valSelector;

      // get random suit and value
      suitSelector = (int) (Math.random() * 4);
      valSelector = (int) (Math.random() * 14);

      // pick suit
      suit = turnIntIntoSuit(suitSelector);
      val = turnIntIntoVal(valSelector);

      return new Card(val, suit);
   }

   // note: this method not needed if we use int for suits instead of enum
   static Card.Suit turnIntIntoSuit(int k)
   {
      return Card.Suit.values()[k]; //
   }

   static char turnIntIntoVal(int k)
   {
      k++; // put in range 1-13
      switch (k)
      {
      case 1:
         return 'A';
      case 10:
         return 'T';
      case 11:
         return 'J';
      case 12:
         return 'Q';
      case 13:
         return 'K';
      case 14:
         return 'X';
      default:
         return (char) ('0' + k); // simple way to turn n into 'n'
      }
   }
}

//subclass from class Card
class CardWOrderStk extends Card
{
   //Instantiate java.util.Stack object
   static java.util.Stack<orderObject> orderOb
         = new java.util.Stack<orderObject>();

   //defines a new nested class
   static private class orderObject
   {
      public char[] valueOrder =
      { '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A', 'X' };
      public Card.Suit[] suitOrder =
      { Suit.clubs, Suit.diamonds, Suit.hearts, Suit.spades };
   }

   //push ordering to stack
   static public void pushOrdering()
   {
      orderOb.push(new orderObject());
   }

   //pop ordering from list
   static public boolean popOrdering()
   {
      if (orderOb.isEmpty())
         return false;

      orderObject ob = orderOb.pop();
      valueRanks = ob.valueOrder;
      suitRanks = ob.suitOrder;
      return true;
   }
}

// class Card ----------------------------------------------------------------
class Card
{
   // type and constants
   public enum State
   {
      deleted, active
   } // not bool because later we may expand

   public enum Suit
   {
      clubs, diamonds, hearts, spades
   }

   // for sort.
   public static char[] valueRanks =
   { '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A', 'X' };
   static Suit[] suitRanks =
   { Suit.clubs, Suit.diamonds, Suit.hearts, Suit.spades };
   static int numValsInOrderingArray = 14; // maybe 14 if 'X' = Joker, or < 13

   // private data
   private char value;
   private Suit suit;
   State state;
   boolean errorFlag;

   // 4 overloaded constructors
   public Card(char value, Suit suit)
   {
      set(value, suit);
   }

   public Card(char value)
   {
      this(value, Suit.spades);
   }

   public Card()
   {
      this('A', Suit.spades);
   }

   // copy constructor
   public Card(Card card)
   {
      this(card.value, card.suit);
   }

   // mutators
   public boolean set(char value, Suit suit)
   {
      char upVal; // for upcasing char

      // can't really have an error here
      this.suit = suit;

      // convert to uppercase to simplify
      upVal = Character.toUpperCase(value);

      // check for validity
      if (upVal == 'A' || upVal == 'K' || upVal == 'Q' || upVal == 'J'
            || upVal == 'T' || upVal == 'X' || (upVal >= '2' && upVal <= '9'))
      {
         errorFlag = false;
         state = State.active;
         this.value = upVal;
      } else
      {
         errorFlag = true;
         return false;
      }

      return !errorFlag;
   }

   public void setState(State state)
   {
      this.state = state;
   }

   // accessors
   public char getVal()
   {
      return value;
   }

   public Suit getSuit()
   {
      return suit;
   }

   public State getState()
   {
      return state;
   }

   public boolean getErrorFlag()
   {
      return errorFlag;
   }

   // stringizer
   public String toString()
   {
      String retVal;

      if (errorFlag)
         return "** illegal **";
      if (state == State.deleted)
         return "( deleted )";

      // else implied

      if (value != 'X')
      {
         // not a joker
         retVal = String.valueOf(value);
         retVal += " of ";
         retVal += String.valueOf(suit);
      } else
      {
         // joker
         retVal = "joker";

         if (suit == Suit.clubs)
            retVal += " 1";
         else if (suit == Suit.diamonds)
            retVal += " 2";
         else if (suit == Suit.hearts)
            retVal += " 3";
         else if (suit == Suit.spades)
            retVal += " 4";
      }

      return retVal;
   }

   public boolean equals(Card card)
   {
      if (this.value != card.value)
         return false;
      if (this.suit != card.suit)
         return false;
      if (this.errorFlag != card.errorFlag)
         return false;
      if (this.state != card.state)
         return false;
      return true;
   }

   // sort member methods
   public int compareTo(Card other)
   {
      if (this.value == other.value)
         return (getSuitRank(this.suit) - getSuitRank(other.suit));

      return (getValueRank(this.value) - getValueRank(other.value));
   }

   public static void setRankingOrder(char[] valueOrderArr, Suit[] suitOrdeArr,
         int numValsInOrderingArray)
   {
      int k;

      // expects valueOrderArr[] to contain only cards used per pack,
      // including jokers, needed to define order for the game environment

      if (numValsInOrderingArray < 0 || numValsInOrderingArray > 14)
         return;

      Card.numValsInOrderingArray = numValsInOrderingArray;

      for (k = 0; k < numValsInOrderingArray; k++)
         Card.valueRanks[k] = valueOrderArr[k];

      for (k = 0; k < 4; k++)
         Card.suitRanks[k] = suitOrdeArr[k];
   }

   public static int getSuitRank(Suit st)
   {
      int k;

      for (k = 0; k < 4; k++)
         if (suitRanks[k] == st)
            return k;

      // should not happen
      return 0;
   }

   public static int getValueRank(char val)
   {
      int k;

      for (k = 0; k < numValsInOrderingArray; k++)
         if (valueRanks[k] == val)
            return k;

      // should not happen
      return 0;
   }

   public static void arraySort(Card[] array, int arraySize)
   {
      for (int k = 0; k < arraySize; k++)
         if (!floatLargestToTop(array, arraySize - 1 - k))
            return;
   }

   private static boolean floatLargestToTop(Card[] array, int top)
   {
      boolean changed = false;
      Card temp;

      for (int k = 0; k < top; k++)
         if (array[k].compareTo(array[k + 1]) > 0)
         {
            temp = array[k];
            array[k] = array[k + 1];
            array[k + 1] = temp;
            changed = true;
         }
      ;
      return changed;
   }
}
